# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  lint:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
 
  test:

    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write

    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - name: Configure git user SuperAGI-Bot
        run: |
          git config --global user.name "SuperAGI-Bot"
          git config --global user.email "github-bot@superagi.com"
          
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Test with pytest
        run: |
          pytest --cov=superagi --cov-branch --cov-report term-missing --cov-report xml \
            tests/unit_tests -s
        env:
          CI: true
          ENV: DEV
          PLAIN_OUTPUT: True
          REDIS_URL: "localhost:6379"


          

          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

        - name: Cache

  uses: actions/cache@v3.3.2

  with:

    # A list of files, directories, and wildcard patterns to cache and restore

    path: 

    # An explicit key for restoring and saving the cache

    key: 

    # An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.

    restore-keys: # optional

    # The chunk size used to split up large files during upload, in bytes

    upload-chunk-size: # optional

    # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms

    enableCrossOsArchive: # optional, default is false

    # Fail the workflow if cache entry is not found

    fail-on-cache-miss: # optional, default is false

    # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache

    lookup-only: # optional, default is false

=======

          IS_TESTING: True
