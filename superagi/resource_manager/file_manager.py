import csv
import os
from typing import Any, Optional
from sqlalchemy.orm import Session
from superagi.config.config import get_config
from superagi.helper.resource_helper import ResourceHelper
from superagi.helper.s3_helper import S3Helper
from superagi.lib.logger import logger
from superagi.models.agent import Agent
from superagi.models.agent_execution import AgentExecution
from superagi.types.storage_types import StorageType

class FileManager:
    def __init__(self, session: Session, agent_id: Optional[int] = None, agent_execution_id: Optional[int] = None):
        self.session = session
        self.agent_id = agent_id
        self.agent_execution_id = agent_execution_id

    def write_binary_file(self, file_name: str, data: bytes) -> str:
        if self.agent_id is not None:
            final_path = ResourceHelper.get_agent_write_resource_path(
                file_name,
                Agent.get_agent_from_id(self.session, self.agent_id),
                AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
            )
        else:
            final_path = ResourceHelper.get_resource_path(file_name)
        try:
            with open(final_path, mode="wb") as img:
                img.write(data)
            self.write_to_s3(file_name, final_path)
            logger.info(f"Binary {file_name} saved successfully")
            return f"Binary {file_name} saved successfully"
        except Exception as err:
            return f"Error write_binary_file: {err}"

    def write_to_s3(self, file_name: str, final_path: str) -> None:
        with open(final_path, 'rb') as img:
            resource = ResourceHelper.make_written_file_resource(
                file_name=file_name,
                agent=Agent.get_agent_from_id(self.session, self.agent_id),
                agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id),
                session=self.session
            )
            if resource.storage_type == StorageType.S3.value:
                s3_helper = S3Helper()
                s3_helper.upload_file(img, path=resource.path)

    def write_file(self, file_name: str, content: str) -> str:
        if self.agent_id is not None:
            final_path = ResourceHelper.get_agent_write_resource_path(
                file_name,
                agent=Agent.get_agent_from_id(self.session, self.agent_id),
                agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
            )
        else:
            final_path = ResourceHelper.get_resource_path(file_name)
        try:
            with open(final_path, mode="w") as file:
                file.write(content)
            self.write_to_s3(file_name, final_path)
            logger.info(f"{file_name} - File written successfully")
            return f"{file_name} - File written successfully"
        except Exception as err:
            return f"Error write_file: {err}"

    def write_csv_file(self, file_name: str, csv_data: Any) -> str:
        if self.agent_id is not None:
            final_path = ResourceHelper.get_agent_write_resource_path(
                file_name,
                agent=Agent.get_agent_from_id(self.session, self.agent_id),
                agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
            )
        else:
            final_path = ResourceHelper.get_resource_path(file_name)
        try:
            with open(final_path, mode="w", newline="") as file:
                writer = csv.writer(file, lineterminator="\n")
                writer.writerows(csv_data)
            self.write_to_s3(file_name, final_path)
            logger.info(f"{file_name} - File written successfully")
            return f"{file_name} - File written successfully"
        except Exception as err:
            return f"Error write_csv_file: {err}"

    def get_agent_resource_path(self, file_name: str) -> str:
        return ResourceHelper.get_agent_write_resource_path(
            file_name,
            agent=Agent.get_agent_from_id(self.session, self.agent_id),
            agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
        )

    def read_file(self, file_name: str) -> str:
        if self.agent_id is not None:
            final_path = self.get_agent_resource_path(file_name)
        else:
            final_path = ResourceHelper.get_resource_path(file_name)

        try:
            with open(final_path, mode="r") as file:
                content = file.read()
            logger.info(f"{file_name} - File read successfully")
            return content
        except Exception as err:
            return f"Error while reading file {file_name}: {err}"

    def get_files(self) -> list[str]:
        """
        Gets all file names generated by the CodingTool.
        Returns:
            A list of file names.
        """

        if self.agent_id is not None:
            final_path = self.get_agent_resource_path("")
        else:
            final_path = ResourceHelper.get_resource_path("")
        try:
            # List all files in the directory
            files = os.listdir(final_path)
        except Exception as err:
            logger.error(f"Error while accessing files in {final_path}: {err}")
            files = []
        return files
```

These changes include adding type annotations, improving error handling and logging, using context managers for resource management, and addressing the other suggestions mentioned.
Malformed response #1, retrying...
No filename provided before ``` in file listing
Apologies for the oversight. Here are the updated file listings with the filename included:

gui/Dockerfile
```
gui/Dockerfile
```
```
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci

# Rebuild the source code only when needed
FROM node:18-alpine AS builder

WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules

COPY . .
ARG NEXT_PUBLIC_API_BASE_URL=/api
ENV NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL
ARG NEXT_PUBLIC_MIXPANEL_AUTH_ID
ENV NEXT_PUBLIC_MIXPANEL_AUTH_ID=$NEXT_PUBLIC_MIXPANEL_AUTH_ID
EXPOSE 3000

CMD ["npm", "run", "dev"]
```

Dockerfile
```
Dockerfile
```
```
# Stage 1: Compile image
FROM python:3.10-slim-bullseye AS compile-image
WORKDIR /app

RUN apt-get update && \
    apt-get install --no-install-recommends -y wget libpq-dev gcc g++ && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt
RUN python -m nltk.downloader averaged_perceptron_tagger punkt

COPY . .

RUN chmod +x ./entrypoint.sh ./wait-for-it.sh ./install_tool_dependencies.sh ./entrypoint_celery.sh

# Stage 2: Build image
FROM python:3.10-slim-bullseye AS build-image
WORKDIR /app

RUN apt-get update && \
    apt-get install --no-install-recommends -y libpq-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY --from=compile-image /opt/venv /opt/venv
COPY --from=compile-image /app /app
COPY --from=compile-image /root/nltk_data /root/nltk_data

ENV PATH="/opt/venv/bin:$PATH"

EXPOSE 8001
```

superagi/resource_manager/file_manager.py
```
superagi/resource_manager/file_manager.py
```
```
import csv
import os
from typing import Any, Optional
from sqlalchemy.orm import Session
from superagi.config.config import get_config
from superagi.helper.resource_helper import ResourceHelper
from superagi.helper.s3_helper import S3Helper
from superagi.lib.logger import logger
from superagi.models.agent import Agent
from superagi.models.agent_execution import AgentExecution
from superagi.types.storage_types import StorageType

class FileManager:
    def __init__(self, session: Session, agent_id: Optional[int] = None, agent_execution_id: Optional[int] = None):
        self.session = session
        self.agent_id = agent_id
        self.agent_execution_id = agent_execution_id

    def write_binary_file(self, file_name: str, data: bytes) -> str:
        if self.agent_id is not None:
            final_path = ResourceHelper.get_agent_write_resource_path(
                file_name,
                Agent.get_agent_from_id(self.session, self.agent_id),
                AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
            )
        else:
            final_path = ResourceHelper.get_resource_path(file_name)
        try:
            with open(final_path, mode="wb") as img:
                img.write(data)
            self.write_to_s3(file_name, final_path)
            logger.info(f"Binary {file_name} saved successfully")
            return f"Binary {file_name} saved successfully"
        except Exception as err:
            return f"Error write_binary_file: {err}"

    def write_to_s3(self, file_name: str, final_path: str) -> None:
        with open(final_path, 'rb') as img:
            resource = ResourceHelper.make_written_file_resource(
                file_name=file_name,
                agent=Agent.get_agent_from_id(self.session, self.agent_id),
                agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id),
                session=self.session
            )
            if resource.storage_type == StorageType.S3.value:
                s3_helper = S3Helper()
                s3_helper.upload_file(img, path=resource.path)

    def write_file(self, file_name: str, content: str) -> str:
        if self.agent_id is not None:
            final_path = ResourceHelper.get_agent_write_resource_path(
                file_name,
                agent=Agent.get_agent_from_id(self.session, self.agent_id),
                agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
            )
        else:
            final_path = ResourceHelper.get_resource_path(file_name)
        try:
            with open(final_path, mode="w") as file:
                file.write(content)
            self.write_to_s3(file_name, final_path)
            logger.info(f"{file_name} - File written successfully")
            return f"{file_name} - File written successfully"
        except Exception as err:
            return f"Error write_file: {err}"

    def write_csv_file(self, file_name: str, csv_data: Any) -> str:
        if self.agent_id is not None:
            final_path = ResourceHelper.get_agent_write_resource_path(
                file_name,
                agent=Agent.get_agent_from_id(self.session, self.agent_id),
                agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
            )
        else:
            final_path = ResourceHelper.get_resource_path(file_name)
        try:
            with open(final_path, mode="w", newline="") as file:
                writer = csv.writer(file, lineterminator="\n")
                writer.writerows(csv_data)
            self.write_to_s3(file_name, final_path)
            logger.info(f"{file_name} - File written successfully")
            return f"{file_name} - File written successfully"
        except Exception as err:
            return f"Error write_csv_file: {err}"

    def get_agent_resource_path(self, file_name: str) -> str:
        return ResourceHelper.get_agent_write_resource_path(
            file_name,
            agent=Agent.get_agent_from_id(self.session, self.agent_id),
            agent_execution=AgentExecution.get_agent_execution_from_id(self.session, self.agent_execution_id)
        )

    def read_file(self, file_name: str) -> str:
        if self.agent_id is not None:
            final_path = self.get_agent_resource_path(file_name)
        else:
            final_path = ResourceHelper.get_resource_path(file_name)

        try:
            with open(final_path, mode="r") as file:
                content = file.read()
            logger.info(f"{file_name} - File read successfully")
            return content
        except Exception as err:
            return f"Error while reading file {file_name}: {err}"

    def get_files(self) -> list[str]:
        """
        Gets all file names generated by the CodingTool.
        Returns:
            A list of file names.
        """

        if self.agent_id is not None:
            final_path = self.get_agent_resource_path("")
        else:
            final_path = ResourceHelper.get_resource_path("")
        try:
            # List all files in the directory
            files = os.listdir(final_path)
        except Exception as err:
            logger.error(f"Error while accessing files in {final_path}: {err}")
            files = []
        return files