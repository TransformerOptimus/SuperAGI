import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

import superagi.models.agent_execution
from superagi.lib.logger import logger
from superagi.models.agent_execution_feed import AgentExecutionFeed
from superagi.models.agent_execution_permission import AgentExecutionPermission
from superagi.models.base_model import DBBaseModel as Base
from superagi.jobs.agent_executor import AgentExecutor
# Setup
engine = create_engine("sqlite:///:memory:")
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

class StubSpawnedAgent:
    def __init__(self):
        self.handled_responses = []

    def handle_tool_response(self, response):
        self.handled_responses.append(response)
        return {"result": response}

def test_handle_wait_for_permission():
    # Setup an in-memory SQLite database
    session = Session()

    # Add testing entities to the session
    agent_execution = superagi.models.agent_execution.AgentExecution(status="WAITING_FOR_PERMISSION",)
    session.add(agent_execution)
    session.flush()

    permission_pending = AgentExecutionPermission(id=1, status="PENDING",agent_execution_id=agent_execution.id,tool_name="test_tool")
    permission_approved = AgentExecutionPermission(id=2, status="APPROVED", assistant_reply="Approved",agent_execution_id=agent_execution.id,tool_name="test_tool")
    permission_denied = AgentExecutionPermission(id=3, status="DENIED", user_feedback="Nope",agent_execution_id=agent_execution.id,tool_name="test_tool")
    session.add_all([permission_pending, permission_approved, permission_denied])

    spawned_agent = StubSpawnedAgent()  # You should create this class as a test stub
    session.flush()  # Flush to get autogenerated ID
    agent_execution_id = agent_execution.id

    # Test the pending case
    agent_execution.permission_id = permission_pending.id
    with pytest.raises(ValueError):
        AgentExecutor().handle_wait_for_permission(agent_execution, spawned_agent, session)

    # Test the approved case
    agent_execution.status = "WAITING_FOR_PERMISSION"
    agent_execution.permission_id = permission_approved.id
    AgentExecutor().handle_wait_for_permission(agent_execution, spawned_agent, session)

    agent_execution_feed = session.query(AgentExecutionFeed).filter(
        AgentExecutionFeed.agent_execution_id == agent_execution_id).first()
    logger.info(agent_execution_feed)
    assert agent_execution_feed is not None
    assert agent_execution.status == "RUNNING"
    assert agent_execution_feed.feed == "Approved"

    # Test the denied case
    agent_execution.status = "WAITING_FOR_PERMISSION"
    agent_execution.permission_id = permission_denied.id
    AgentExecutor().handle_wait_for_permission(agent_execution, spawned_agent, session)

    agent_execution_feeds = session.query(AgentExecutionFeed).filter(
        AgentExecutionFeed.agent_execution_id == agent_execution_id).all()
    assert len(agent_execution_feeds) == 2
    assert agent_execution.status == "RUNNING"
    assert agent_execution_feeds[-1].feed == "User denied the permission to run the tool test_tool" \
                                             " and has given the following feedback : Nope"